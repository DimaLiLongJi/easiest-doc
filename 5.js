(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{202:function(n,e,t){},208:function(n,e,t){"use strict";t.r(e);var i=t(0),r=(t(202),function(){return[{h1:"服务端渲染（SSR）",p:["标准的 InDiv 应用会运行在浏览器中，","当 JavaScript 脚本加载完毕后，它会在 DOM 中渲染页面，以响应用户的操作。","但是在特殊场景，比如 SEO，需要提升在低性能设备上的渲染速度，需要迅速显示首屏时，","可能服务端渲染更适合。","它可以生成这些页面，并在浏览器请求时直接用它们给出响应。"],info:[{title:"工作原理",p:["通过引入 @indiv/ssr-renderer v1.1.0+。","@indiv/ssr-renderer 包提供了服务端的 DOM 实现，使得渲染 InDiv 应用不再依赖浏览器。","通过 node 端，会把客户端对应用页面的请求传给 @indiv/ssr-renderer 中的 renderToString  函数，","引入 indiv 实例和路由的配置对象，renderToString 会根据对应的路径，返回已经被渲染完的字符串模板。",'通过不同框架的渲染机制，将返回的字符串模板渲染到模板的 <div id="root"></div> 中。',"最后，服务器就会把渲染好的页面返回给客户端。"],pchild:["1. 生命周期受到限制，服务端渲染中仅仅支持 constructor 和 OnInit 的调用。","2. 因为 InDiv 的 nvHttp 对象是封装的 axios 库，因此支持在 node 环境中使用 http 请求。","3. 通过 nv-on:eventName 方式绑定的方法暂时无法渲染。"]},{title:"环境及使用",p:["Node.js: v6+","indiv: v1.2.0+","@indiv/ssr-renderer: v1.1.0+","本例子使用 express 及 ejs 模板，你也可以选择适合的 服务端框架 及 模板 。"],pchild:["1. 创建 InDiv app","2. 创建一个用于处理请求的 express Web 服务器","3. 创建一个 ejs 模板","4. 引入 @indiv/ssr-renderer 包 renderToString: (url: string, routes: TRouter[], indiv: InDiv) => string","5. 将 request 的 url， indiv app路由配置对象，和 indiv实例 作为参数依次传入 renderToString","6. 最后 renderToString 的返回值渲染至模板中"],code:"\n  // in index.ejs\n  <div id=\"root\">\n    <%- content %>\n  </div>\n\n  // in service side\n  const express = require('express');\n  const renderToString = require('@indiv/ssr-renderer');\n\n  const app = express();\n\n  app.use('/indiv-doc', (request, response, next) => {    \n    // import indiv app\n    const ssrData = require('./dist/main.js');\n    response.render('index.ejs', {\n      // use in ejs template\n      content: renderToString(request.url, ssrData.routes, ssrData.default.inDiv),\n    });\n  });\n    "}]}]});function o(n){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var c=function(n,e,t,i){var r,c=arguments.length,s=c<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"===("undefined"==typeof Reflect?"undefined":o(Reflect))&&"function"==typeof Reflect.decorate)s=Reflect.decorate(n,e,t,i);else for(var p=n.length-1;p>=0;p--)(r=n[p])&&(s=(c<3?r(s):c>3?r(e,t,s):r(e,t))||s);return c>3&&s&&Object.defineProperty(e,t,s),s},s=function(){function n(){this.infos=r(),this.codeType="javascript"}return n=c([Object(i.a)({selector:"ssr-container",template:'\n        <div class="page-container">\n            <div class="info-content" nv-repeat="info in infos">\n                <h1>{{info.h1}}</h1>\n                <p nv-repeat="rp in info.p">{{rp}}</p>\n                <div class="child-info" nv-repeat="code in info.info">\n                    <h2>{{code.title}}</h2>\n                    <p nv-repeat="pli in code.p">{{pli}}</p>\n                    <div class="pchild" nv-if="code.pchild">\n                    <p nv-repeat="child in code.pchild">{{child}}</p>\n                    </div>\n                    <code-shower nv-if="code.code" type="{codeType}" codes="{code.code}"></code-shower>\n                </div>\n            </div>\n        </div>\n    '})],n)}();function p(n){return(p="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}var d=function(n,e,t,i){var r,o=arguments.length,c=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,t):i;if("object"===("undefined"==typeof Reflect?"undefined":p(Reflect))&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,e,t,i);else for(var s=n.length-1;s>=0;s--)(r=n[s])&&(c=(o<3?r(c):o>3?r(e,t,c):r(e,t))||c);return o>3&&c&&Object.defineProperty(e,t,c),c},f=function(){function n(){}return n=d([Object(i.g)({declarations:[s],exports:[s],bootstrap:s})],n)}();e.default=f}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,